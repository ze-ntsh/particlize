// Generated by dts-bundle-generator v9.5.1

import * as THREE from 'three';
import { TextGeometry, TextGeometryParameters } from 'three/examples/jsm/geometries/TextGeometry';

export declare class RenderTargetVisualizer {
	uuid: string;
	scene: THREE.Scene;
	camera: THREE.OrthographicCamera;
	canvas: HTMLCanvasElement;
	renderer: THREE.WebGLRenderer;
	labelCanvas: OffscreenCanvas;
	labelTexture: THREE.Texture;
	constructor(renderer: THREE.WebGLRenderer);
	resize(): void;
	/**
	 * Generate a grid of quads for each FBO texture.
	 */
	update(fbos: Map<string, any>): void;
	/**
	 * Render the current visualizer grid to screen.
	 */
	render(): void;
	/**
	 * Generate a text label as a sprite.
	 */
	makeLabelSprite(text: string): THREE.Sprite;
	dispose(): void;
}
export declare const textToMesh: (props: Partial<{
	text: string;
	fontURL: string;
	color: [
		number,
		number,
		number
	];
} & TextGeometryParameters>) => Promise<THREE.Mesh<TextGeometry, THREE.MeshBasicMaterial, THREE.Object3DEventMap>>;
export declare const getGLSLType: (value: any) => string | null;
export declare const getGLSLValue: (value: any) => string;
export declare const deepMerge: (target: any, source: any, visited?: Map<any, any>) => any;

export {};
